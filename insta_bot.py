import os
import logging
import pickle
import re
import pytz
from datetime import datetime
from threading import Thread, Lock
from enum import Enum, auto
from typing import Dict, List, Optional

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)
from instagrapi import Client
from instagrapi.exceptions import (
    LoginRequired,
    TwoFactorRequired,
    ChallengeRequired,
    ClientError,
    BadPassword,
    PleaseWaitFewMinutes
)

# ==============================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ==============================================

class Config:
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
    STORAGE_FILE = 'instagram_accounts.dat'
    TEMP_DIR = 'tmp'
    SCHEDULER_INTERVAL = 10
    MAX_LOGIN_ATTEMPTS = 3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==============================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# ==============================================

class State(Enum):
    SELECT_ACCOUNT = auto()
    INPUT_USERNAME = auto()
    INPUT_PASSWORD = auto()
    SELECT_2FA_METHOD = auto()
    INPUT_2FA_CODE = auto()
    INPUT_TARGET_ACCOUNT = auto()
    INPUT_POST_CAPTION = auto()
    INPUT_POST_TIME = auto()
    INPUT_STORY_TIME = auto()

class AccountData:
    def __init__(self, username: str, client: Client, verification_method: Optional[str] = None):
        self.username = username
        self.client = client
        self.user_id = client.user_id
        self.verification_method = verification_method
        self.last_used = datetime.now()

# ==============================================
# –ú–ï–ù–ï–î–ñ–ï–† –î–ê–ù–ù–´–•
# ==============================================

class DataManager:
    def __init__(self):
        self.accounts: Dict[str, AccountData] = {}
        self.post_queue = []
        self.stories_queue = []
        self.lock = Lock()
        self.load_accounts()

    def load_accounts(self):
        try:
            with open(Config.STORAGE_FILE, 'rb') as f:
                data = pickle.load(f)
                with self.lock:
                    for username, acc_data in data.items():
                        client = Client()
                        if 'session' in acc_data:
                            client.set_settings(acc_data['session'])
                        self.accounts[username] = AccountData(
                            username=username,
                            client=client,
                            verification_method=acc_data.get('verification_method')
                        )
        except (FileNotFoundError, EOFError):
            logger.info("No accounts file found, creating new one")

    def save_accounts(self):
        with self.lock:
            data_to_save = {}
            for username, account in self.accounts.items():
                data_to_save[username] = {
                    'session': account.client.get_settings(),
                    'verification_method': account.verification_method,
                    'last_used': account.last_used
                }
            with open(Config.STORAGE_FILE, 'wb') as f:
                pickle.dump(data_to_save, f)

# ==============================================
# INSTAGRAM –ú–ï–ù–ï–î–ñ–ï–†
# ==============================================

class InstagramManager:
    @staticmethod
    async def login(username: str, password: str, verification_code: str = None, method: str = None) -> Client:
        client = Client()
        try:
            if method == 'email':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è email 2FA
                client.login(username, password, verification_code=verification_code)
            elif verification_code and method:
                client.login(username, password)
                client.get_totp_two_factor_code = lambda: verification_code
                client.handle_two_factor_login(verification_code)
            else:
                client.login(username, password)
            return client
        except Exception as e:
            logger.error(f"Login failed: {e}")
            raise

    @staticmethod
    async def get_2fa_methods(username: str, password: str) -> List[str]:
        client = Client()
        try:
            client.login(username, password)
            return []
        except TwoFactorRequired as e:
            return getattr(e, 'allowed_methods', ['app', 'sms', 'whatsapp', 'call', 'email'])
        except Exception as e:
            logger.error(f"2FA methods check failed: {e}")
            return []

# ==============================================
# –û–°–ù–û–í–ù–û–ô –ë–û–¢
# ==============================================

class InstagramBot:
    def __init__(self):
        self.data_manager = DataManager()
        self.application = None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ Instagram.\n\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_account - –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n"
            "/accounts - —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            "/add_post - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç\n"
            "/add_story - –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ—Ä–∏—Å\n"
            "/queue - –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "/cancel - –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )

    async def add_account_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram:")
        return State.INPUT_USERNAME

    async def input_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username"""
        username = update.message.text.strip()
        context.user_data['username'] = username
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return State.INPUT_PASSWORD

    async def input_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
        password = update.message.text
        username = context.user_data['username']
        context.user_data['password'] = password

        try:
            methods = await InstagramManager.get_2fa_methods(username, password)
            if not methods:
                client = await InstagramManager.login(username, password)
                self.data_manager.accounts[username] = AccountData(username, client)
                self.data_manager.save_accounts()
                await update.message.reply_text(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω!")
                return ConversationHandler.END

            buttons = []
            if 'app' in methods:
                buttons.append(InlineKeyboardButton("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data='2fa_app'))
            if 'sms' in methods:
                buttons.append(InlineKeyboardButton("üì® SMS", callback_data='2fa_sms'))
            if 'whatsapp' in methods:
                buttons.append(InlineKeyboardButton("üí¨ WhatsApp", callback_data='2fa_whatsapp'))
            if 'call' in methods:
                buttons.append(InlineKeyboardButton("üìû –ó–≤–æ–Ω–æ–∫", callback_data='2fa_call'))
            if 'email' in methods:
                buttons.append(InlineKeyboardButton("üìß Email", callback_data='2fa_email'))

            keyboard = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
            await update.message.reply_text(
                "üîê –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ 2FA:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return State.SELECT_2FA_METHOD

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return ConversationHandler.END

    async def select_2fa_method(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ 2FA"""
        query = update.callback_query
        await query.answer()

        method_map = {
            '2fa_app': ('app', "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"),
            '2fa_sms': ('sms', "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:"),
            '2fa_whatsapp': ('whatsapp', "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ WhatsApp:"),
            '2fa_call': ('call', "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –∑–≤–æ–Ω–∫–∞:"),
            '2fa_email': ('email', "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ email:")
        }

        method, message = method_map.get(query.data, (None, None))
        if not method:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥")
            return State.SELECT_2FA_METHOD

        context.user_data['2fa_method'] = method
        await query.edit_message_text(message)
        return State.INPUT_2FA_CODE

    async def input_2fa_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ 2FA"""
        code = update.message.text.strip()
        if not re.match(r'^\d{6}$', code):
            await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Ü–∏—Ñ—Ä")
            return State.INPUT_2FA_CODE

        username = context.user_data['username']
        password = context.user_data['password']
        method = context.user_data['2fa_method']

        try:
            client = await InstagramManager.login(username, password, code, method)
            self.data_manager.accounts[username] = AccountData(username, client, method)
            self.data_manager.save_accounts()
            await update.message.reply_text(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω!")
            return ConversationHandler.END
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return ConversationHandler.END

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('add_account', self.add_account_start)],
            states={
                State.INPUT_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_username)],
                State.INPUT_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_password)],
                State.SELECT_2FA_METHOD: [CallbackQueryHandler(self.select_2fa_method)],
                State.INPUT_2FA_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.input_2fa_code)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
        )

        self.application.add_handler(CommandHandler('start', self.start))
        self.application.add_handler(conv_handler)
        self.application.add_handler(CommandHandler('accounts', self.list_accounts))
        self.application.add_error_handler(self.error_handler)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(Config.TELEGRAM_TOKEN).build()
        self.setup_handlers()
        
        if not os.path.exists(Config.TEMP_DIR):
            os.makedirs(Config.TEMP_DIR)

        await self.application.run_polling()

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(msg="Exception while handling an update:", exc_info=context.error)
        if update and update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# ==============================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ==============================================

if __name__ == '__main__':
    bot = InstagramBot()
    bot.run()
